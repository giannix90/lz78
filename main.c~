#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<getopt.h>
#include <ctype.h>
#include<inttypes.h>
#include<stdint.h>
 #include <sys/types.h>

#include "lz78.h"
#include "bitio.h"

void print_bytes(const unsigned char* buf, int len){
	int i;
	for(i=0;i<len-1;i++)
		printf("%02X",buf[i]);
	printf("%02X",buf[len-1]);
	
}

int main(int argc,char* argv[])
{
	struct bitio* file;
	int option;
	char * arguments;
	struct lz78* init_struct;

	init_struct=malloc(sizeof(struct lz78));
	
	while ((option = getopt(argc, argv,"c:d:l:i:o:h")) != -1) {
	/* int getopt(int argc, char * const argv[],const char *optstring);
	
       	optstring is a string containing the legitimate option characters.
       	If such a character is followed by a colon, the option requires an
       	argument

	optarg is a string setted after the call to getopt, and contain the pointer to passed argument

	optopt is a char that contain the value of the passed option
	*/	       
 
		switch (option) {

		case 'c':
			arguments=optarg;
			printf("File da comprimere : %s \n",arguments);
			compress(arguments,init_struct);
			printf("File da comprimere2 : %s \n",init_struct->file_to_compress);
			if(hash_init(101)){
				printf("Hash initialization error\n");
				_exit(-1);			
			}
			file=bit_open(init_struct->file_to_compress,0);
			if(file==NULL)printf("Error open file\n");

			char * str;
			str=malloc(3*sizeof(char));
			uint64_t in=0;
			for(int i=0;i<10;i++){
				int r=bit_read(file,(u_int)8,&in);
				printf("Ric: %c\n",(char)in&(1UL<<8)-1);
			}
			//print_hash_table();			

			break;
		case 'd':
			break;
		
		case 'l':
			break;

		case 'i':
			break;
		
		case 'o':
			break;
		
		case '?':
        		if (optopt == 'c')
          			fprintf (stderr, "Option -%c requires an argument.\n", optopt);
        		else if (isprint (optopt))
          			fprintf (stderr, "Unknown option `-%c'.\n", optopt);
        		else
          			fprintf (stderr,"Unknown option character `\\x%x'.\n",optopt);
       			return 1;
      		default:
        		abort ();
		}
	}

return 0;
	
}
